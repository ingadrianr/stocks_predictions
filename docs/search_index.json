[["modelos-de-redes-neuronales-recurrentes-en-series-de-tiempo.html", "8 Modelos de Redes Neuronales Recurrentes en series de tiempo 8.1 Modelo de Elman 8.2 Modelo de Jordan", " 8 Modelos de Redes Neuronales Recurrentes en series de tiempo 8.1 Modelo de Elman Las redes de Elman son el modelo más simple de Red Neuronal Recurrente (en adelante, RNN).Tienen la misma estructura que las redes neuronales alimentadas hacia adelante, salvo por una única circunstancia: se permite que cada neurona se retroalimente a sí misma. En este modelo, cada neurona de capa oculta tiene como función de activación la tangente hiperbólica (\\(tanh\\)).El valor de esta última es el estado de la neurona. Cada célula recibe como entrada su propio valor de salida en el instante inmediatamente anterior (\\(t-1\\)), siguiendo las salidas de las neuronas de la capa anterior y se representa: \\(x=w_i d_i +b+Uh_{t-1}\\) \\(h_t=tanh(w_i d_i +b+Uh_{t-1})\\) Donde \\(h_t\\) es el estado de la neurona en el momento \\(t\\) \\(h_{t-1}\\) es el estado en el momento inmediatamente anterior \\(w_i\\) pesos sinapticos \\(d_i\\) valores de activación de las neuronas de la capa anterior \\(b\\) sesgo Como se puede observar existe un termino extra \\(Uh_{t-1})\\) que no existe en el caso de las redes no recurrentes, y que permite para este caso que cada neurona aprenda de si misma. Este coeficiente \\(U\\) funcionara casi como un peso. A continuacion se realiza solo para APPLE: Continuamos con la construccion de base de entrenamiento y base de test set.seed(1) tamano_total &lt;- length(stock_rnn_norm) tamano_train &lt;- round(tamano_total*9/12, digits = 0) train &lt;- 0:(tamano_train-1) test&lt;-(tamano_train):tamano_total y&lt;-as.zoo(stock_rnn_norm) x1&lt;-Lag(y,k=1) x2&lt;-Lag(y,k=2) x3&lt;-Lag(y,k=3) x4&lt;-Lag(y,k=4) x5&lt;-Lag(y,k=5) x6&lt;-Lag(y,k=6) x7&lt;-Lag(y,k=7) x8&lt;-Lag(y,k=8) x9&lt;-Lag(y,k=9) x10&lt;-Lag(y,k=10) slogN&lt;-cbind(y,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10) slogN&lt;-slogN[-(1:10),] inputs&lt;-slogN[,2:11] outputs&lt;-slogN[,1] fit&lt;-elman(inputs[train], outputs[train], size=c(9,2), learnFuncParams=c(0.1), maxit=10000) plotIterativeError(fit,main = &quot;Iterative Error for 9,2 Neuron elman Model&quot;) ### Se desnormalizan los datos predictions&lt;-predict(fit,inputs[-train]) valuesPred &lt;- predictions*(max(stock_rnn)-min(stock_rnn)) + min(stock_rnn) valuesPred[0:10] ## [1] 136.2321 137.6087 139.7882 140.1295 140.0936 139.6354 141.2500 143.7929 ## [9] 144.3251 143.6510 Graficamos el comportamiento de los datos reales vs su prediccion y el pronostico par(mfcol = c(1, 2)) ### Grafico train-test y &lt;- as.vector(outputs[-test]) pred &lt;- predict(fit, inputs[-test]) plot(y, type = &quot;l&quot;, main = &quot;Prediccion RNN Elman AAPL&quot;, xlab = &quot;Dia&quot;, ylab = &quot;Precio cierre&quot;, col = &quot;black&quot;) lines(pred, col = &quot;red&quot;) legend(&quot;bottomleft&quot;, legend = c(&quot;Datos reales&quot;, &quot;Predicciones&quot;), col = c(&quot;black&quot;, &quot;red&quot;), lty = c(1, 1), lwd = 2, cex = 0.8, box.lwd = 2) ### Grafico Pronostico x &lt;- 1:(tamano_total + length(valuesPred)) y &lt;- c(stock$close, valuesPred) plot(x, y, main = &quot;Pronostico RNN Elman AAPL&quot;, xlab = &quot;Dia&quot;, ylab = &quot;Precio cierre&quot;, col = &quot;blue&quot;, type = &quot;l&quot;) lines(x[1:tamano_total], y[1:tamano_total], col = &quot;blue&quot;) lines(x[(tamano_total):length(x)], y[(tamano_total):length(x)], col = &quot;red&quot;) legend(&quot;bottomleft&quot;, legend = c(&quot;Datos reales&quot;, &quot;Pronostico&quot;), col = c(&quot;blue&quot;, &quot;red&quot;), lty = c(1, 1), lwd = 2, cex = 0.8, box.lwd = 2) Para las demás acciones trabajadas 8.2 Modelo de Jordan En las redes de Jordan, la diferencia está en que la entrada de las neuronas de la capa de contexto se toma desde la salida de la red. LLevaremos a cabo el mismo ejercicio realizado para apple modelado por jordan, y como anexo se adjuntara el comportamiento para el resto de las acciones. fit_jordan&lt;-jordan(inputs[train], outputs[train], size=4, learnFuncParams=c(0.01), maxit=10000) plotIterativeError(fit_jordan,main = &quot;Iterative Error for 4 Jordan Model in APPL&quot;) Graficamos el comportamiento de los datos reales vs su prediccion y el pronostico par(mfcol = c(1, 2)) ### Grafico train-test y &lt;- as.vector(outputs[-test]) pred_jordan &lt;- predict(fit_jordan, inputs[-test]) plot(y, type = &quot;l&quot;, main = &quot;Prediccion RNN Jordan AAPL&quot;, xlab = &quot;Dia&quot;, ylab = &quot;Precio cierre&quot;, col = &quot;black&quot;) lines(pred_jordan, col = &quot;red&quot;) legend(&quot;bottomleft&quot;, legend = c(&quot;Datos reales&quot;, &quot;Predicciones&quot;), col = c(&quot;black&quot;, &quot;red&quot;), lty = c(1, 1), lwd = 2, cex = 0.8, box.lwd = 2) ### Grafico Pronostico x &lt;- 1:(tamano_total + length(valuesPred_jordan)) y &lt;- c(stock$close, valuesPred_jordan) plot(x, y, main = &quot;Pronostico RNN Jordan AAPL&quot;, xlab = &quot;Dia&quot;, ylab = &quot;Precio cierre&quot;, col = &quot;blue&quot;, type = &quot;l&quot;) lines(x[1:tamano_total], y[1:tamano_total], col = &quot;blue&quot;) lines(x[(tamano_total):length(x)], y[(tamano_total):length(x)], col = &quot;red&quot;) legend(&quot;bottomleft&quot;, legend = c(&quot;Datos reales&quot;, &quot;Pronostico&quot;), col = c(&quot;blue&quot;, &quot;red&quot;), lty = c(1, 1), lwd = 2, cex = 0.8, box.lwd = 2) Si queremos evaluar las metricas bajo estos dos enfoques para APPLE encontramos: y &lt;- as.vector(outputs[-test]) accuracy_result &lt;- accuracy(as.vector(pred_jordan), y) tabla_jordan &lt;- data.frame(Accion=&#39;AAPL&#39;, Modelo=&#39;Jordan RNN&#39;, ME = accuracy_result[1], RMSE = accuracy_result[2], MAE = accuracy_result[3], MPE = accuracy_result[4], MAPE = accuracy_result[5]) tabla_final &lt;- rbind(tabla_elman, tabla_jordan) tabla_final_redondeada &lt;- tabla_final tabla_final_redondeada[, c(&quot;ME&quot;, &quot;RMSE&quot;, &quot;MAE&quot;, &quot;MPE&quot;, &quot;MAPE&quot;)] &lt;- lapply(tabla_final[, c(&quot;ME&quot;, &quot;RMSE&quot;, &quot;MAE&quot;, &quot;MPE&quot;, &quot;MAPE&quot;)], function(x) format(round(x, digits = 3), nsmall = 3)) tabla_final_redondeada ## Accion Modelo ME RMSE MAE MPE MAPE ## 1 AAPL Elman RNN -0.013 0.039 0.029 -3.210 6.614 ## 2 AAPL Jordan RNN -0.007 0.041 0.031 -2.951 7.237 Para las demás acciones trabajadas "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
